generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider          = "mysql"
  url               = env("DATABASE_URL")
  shadowDatabaseUrl = env("SHADOW_DATABASE_URL")
}

model User {
  id       Int    @id @default(autoincrement())
  username String @unique
  password String

  sentRequests     FriendRequest[] @relation("RequestFrom")
  receivedRequests FriendRequest[] @relation("RequestTo")
  friends          Friend[] @relation("FriendUser")
  friendsOf        Friend[] @relation("FriendFriend")

  memberships      GroupMembership[]
  messages         Message[]
  createdGroups    Group[] @relation("GroupCreator") 

  receivedMessages Message[] @relation("DirectMessages")

  Group Group[]
}

model Group {
  id          Int       @id @default(autoincrement())
  name        String
  description String?
  isPrivate   Boolean   @default(false)
  createdBy   Int
  creator     User      @relation(fields: [createdBy], references: [id])
  memberships GroupMembership[]
  messages    Message[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  User User[] @relation("GroupCreator")
}

model GroupMembership {
  id       Int      @id @default(autoincrement())
  user     User     @relation(fields: [userId], references: [id])
  userId   Int
  group    Group    @relation(fields: [groupId], references: [id])
  groupId  Int
  role     Role     @default(MEMBER)
  joinedAt DateTime @default(now())

  @@unique([userId, groupId])
}

enum Role {
  MEMBER
  ADMIN
}

model Message {
  id          Int      @id @default(autoincrement())
  content     String
  iv          String?  // for AES-GCM IV
  authTag     String?  // for AES-GCM Auth Tag
  createdAt   DateTime @default(now())
  userId      Int
  groupId     Int?
  recipientId Int?

  user        User     @relation(fields: [userId], references: [id])
  group       Group?   @relation(fields: [groupId], references: [id])
  recipient   User?    @relation("DirectMessages", fields: [recipientId], references: [id])
}

model FriendRequest {
  id        Int      @id @default(autoincrement())
  from      User     @relation("RequestFrom", fields: [fromId], references: [id])
  fromId    Int
  to        User     @relation("RequestTo", fields: [toId], references: [id])
  toId      Int
  createdAt DateTime @default(now())
}

model Friend {
  id        Int      @id @default(autoincrement())
  user      User     @relation("FriendUser", fields: [userId], references: [id])
  userId    Int
  friend    User     @relation("FriendFriend", fields: [friendId], references: [id])
  friendId  Int
  createdAt DateTime @default(now())
}

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int               @id @default(autoincrement())
  username          String            @unique
  password          String
  createdAt         DateTime          @default(now())
  profilePictureUrl String?
  bio               String?
  memberships       GroupMembership[]
  messages          Message[]
  friends           Friend[]          @relation("UserFriends")
  friendOf          Friend[]          @relation("FriendsOfUser")
  sentRequests      FriendRequest[]   @relation("SentRequests")
  receivedRequests  FriendRequest[]   @relation("ReceivedRequests")

  Group Group[]
}

model Group {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?  // Ensure this field exists
  isPrivate   Boolean  @default(false) // Ensure this field exists
  createdBy   Int?     // Ensure this field exists
  creator     User?    @relation(fields: [createdBy], references: [id]) // Relation for creator
  createdAt   DateTime @default(now())
  memberships GroupMembership[]
  messages    Message[]
}

model GroupMembership {
  id       Int      @id @default(autoincrement())
  userId   Int
  groupId  Int
  role     String?  // Ensure this field exists
  joinedAt DateTime @default(now())
  group    Group    @relation(fields: [groupId], references: [id])
  user     User     @relation(fields: [userId], references: [id])
}

model Message {
  id        Int      @id @default(autoincrement())
  content   String
  createdAt DateTime @default(now())
  userId    Int
  groupId   Int?
  group     Group?   @relation(fields: [groupId], references: [id])
  user      User     @relation(fields: [userId], references: [id])

  @@index([groupId], map: "Message_groupId_fkey")
  @@index([userId], map: "Message_userId_fkey")
}

model Friend {
  id         Int      @id @default(autoincrement())
  userId     Int
  friendId   Int
  createdAt  DateTime @default(now())
  user       User     @relation("UserFriends", fields: [userId], references: [id])
  friend     User     @relation("FriendsOfUser", fields: [friendId], references: [id])

  @@index([userId], map: "Friend_userId_fkey")
  @@index([friendId], map: "Friend_friendId_fkey")
}

model FriendRequest {
  id          Int      @id @default(autoincrement())
  requesterId Int
  receiverId  Int
  createdAt   DateTime @default(now())
  status      String
  requester   User     @relation("SentRequests", fields: [requesterId], references: [id])
  receiver    User     @relation("ReceivedRequests", fields: [receiverId], references: [id])

  @@index([requesterId], map: "FriendRequest_requesterId_fkey")
  @@index([receiverId], map: "FriendRequest_receiverId_fkey")
}
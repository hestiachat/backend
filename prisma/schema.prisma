generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int               @id @default(autoincrement())
  username          String            @unique
  password          String
  createdAt         DateTime          @default(now())
  profilePictureUrl String?
  bio               String?
  memberships       GroupMembership[]
  messages          Message[]
  friends           Friend[]          @relation("UserFriends")
  friendOf          Friend[]          @relation("FriendsOfUser")
  sentRequests      FriendRequest[]   @relation("SentRequests")
  receivedRequests  FriendRequest[]   @relation("ReceivedRequests")

  Group Group[]

  Message Message[] @relation("RecipientMessages")
}

model Group {
  id          Int      @id @default(autoincrement())
  name        String   @unique
  description String?  
  isPrivate   Boolean  @default(false)
  createdBy   Int
  creator     User     @relation(fields: [createdBy], references: [id])
  createdAt   DateTime @default(now())
  memberships GroupMembership[]
  messages    Message[]
}

enum MembershipRole {
  MEMBER
  ADMIN
}

model GroupMembership {
  id       Int            @id @default(autoincrement())
  userId   Int
  groupId  Int
  role     MembershipRole
  joinedAt DateTime       @default(now())
  group    Group          @relation(fields: [groupId], references: [id])
  user     User           @relation(fields: [userId], references: [id])
}

model Message {
  id          Int      @id @default(autoincrement())
  content     String
  iv          String
  authTag     String
  createdAt   DateTime @default(now())
  userId      Int
  groupId     Int?  
  recipientId Int?

  user        User    @relation(fields: [userId], references: [id])
  group       Group?  @relation(fields: [groupId], references: [id])
  recipient   User?   @relation("RecipientMessages", fields: [recipientId], references: [id])
}

model Friend {
  id         Int      @id @default(autoincrement())
  userId     Int
  friendId   Int
  createdAt  DateTime @default(now())
  user       User     @relation("UserFriends", fields: [userId], references: [id])
  friend     User     @relation("FriendsOfUser", fields: [friendId], references: [id])

  @@index([userId], map: "Friend_userId_fkey")
  @@index([friendId], map: "Friend_friendId_fkey")
}

model FriendRequest {
  id         Int      @id @default(autoincrement())
  createdAt  DateTime @default(now())
  senderId   Int
  receiverId Int
  status     String

  sender     User     @relation("SentRequests", fields: [senderId], references: [id])
  receiver   User     @relation("ReceivedRequests", fields: [receiverId], references: [id])
}